//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class greenhousejob {
        public String id {get;set;} 
        public String name {get;set;} 
        public String requisition_id {get;set;} 
        public String notes {get;set;} 
        public Boolean confidential {get;set;} 
        public String status {get;set;} 
        public String created_at {get;set;} 
        public String opened_at {get;set;} 
        public String closed_at {get;set;} 
        public List<Object> departments {get;set;} 
        public List<Offices> offices {get;set;} 
        public Hiring_team hiring_team {get;set;} 
        public Custom_fields custom_fields {get;set;} 
        public Keyed_custom_fields keyed_custom_fields {get;set;} 
        public List<Openings> openings {get;set;} 
        public map<String,string> fieldName=new map<String,string>();

        public Greenhousejob(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id =  parser.getText();
                            fieldName.put(text,parser.getText());
                        } else if (text == 'name') {
                            name = parser.getText();
                            fieldName.put(text,parser.getText());
                        } else if (text == 'requisition_id') {
                            requisition_id = parser.getText();
                            fieldName.put(text,parser.getText());
                        } else if (text == 'notes') {
                            notes = parser.getText();
                            fieldName.put(text,parser.getText());
                        } else if (text == 'confidential') {
                            confidential = parser.getBooleanValue();
                            fieldName.put(text,parser.getText());
                        } else if (text == 'status') {
                            status = parser.getText();
                            fieldName.put(text,parser.getText());
                        } else if (text == 'created_at') {
                            created_at = parser.getText();
                            fieldName.put(text,parser.getText());
                        } else if (text == 'opened_at') {
                            opened_at = parser.getText();
                            fieldName.put(text,parser.getText());
                        } else if (text == 'closed_at') {
                            closed_at = parser.getText();
                            fieldName.put(text,parser.getText());
                        } else if (text == 'departments') {
                            departments = arrayOfObject(parser);
                        } else if (text == 'offices') {
                            offices = arrayOfOffices(parser);
                        } else if (text == 'hiring_team') {
                            hiring_team = new Hiring_team(parser);
                        } else if (text == 'custom_fields') {
                            custom_fields = new Custom_fields(parser);
                        } else if (text == 'keyed_custom_fields') {
                            keyed_custom_fields = new Keyed_custom_fields(parser);
                        } else if (text == 'openings') {
                            openings = arrayOfOpenings(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Greenhousejob consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    public class Max_bill_rate_1 {
        public String name {get;set;} 
        public String type_Z {get;set;} // in json: type
        public Max_bill_rate value {get;set;} 

        public Max_bill_rate_1(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'name') {
                            name = parser.getText();
                        } else if (text == 'type') {
                            type_Z = parser.getText();
                        } else if (text == 'value') {
                            value = new Max_bill_rate(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Max_bill_rate_1 consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Hiring_team {
        public List<Hiring_managers> hiring_managers {get;set;} 
        public List<Recruiters> recruiters {get;set;} 
        public List<Recruiters> coordinators {get;set;} 
        public List<Child_ids> sourcers {get;set;} 

        public Hiring_team(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'hiring_managers') {
                            hiring_managers = arrayOfHiring_managers(parser);
                        } else if (text == 'recruiters') {
                            recruiters = arrayOfRecruiters(parser);
                        } else if (text == 'coordinators') {
                            coordinators = arrayOfRecruiters(parser);
                        } else if (text == 'sourcers') {
                            sourcers = arrayOfChild_ids(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Hiring_team consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Hiring_managers {
        public String id {get;set;} 
        public String first_name {get;set;} 
        public String last_name {get;set;} 
        public String name {get;set;} 
        public Object employee_id {get;set;} 

        public Hiring_managers(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getText();
                        } else if (text == 'first_name') {
                            first_name = parser.getText();
                        } else if (text == 'last_name') {
                            last_name = parser.getText();
                        } else if (text == 'name') {
                            name = parser.getText();
                        } else if (text == 'employee_id') {
                            employee_id = parser.readValueAs(Object.class);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Hiring_managers consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Sf_id {
        public String name {get;set;} 
        public String type_Z {get;set;} // in json: type
        public String value {get;set;} 

        public Sf_id(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'name') {
                            name = parser.getText();
                        } else if (text == 'type') {
                            type_Z = parser.getText();
                        } else if (text == 'value') {
                            value = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Sf_id consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Custom_fields {
        public list<String> name=new list<String>();
         public map<string,string> fieldValmap=new map<string,string>();
      
         public Custom_fields(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                       
                       // parser.nextToken() ;
                       // value=value+','+parser.getText();
                        //System.debug(LoggingLevel.WARN, 'Custom_fields consuming unrecognized property: '+text);
                        //consumeObject(parser);
                        
                    }
                    fieldValmap.put(text,parser.getText());
                    name.add(text);
                }
            }
        }
    }
    

       
    
    
    public class Sf_date_received {
        public String name {get;set;} 
        public String type_Z {get;set;} // in json: type
        public String value {get;set;} 

        public Sf_date_received(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'name') {
                            name = parser.getText();
                        } else if (text == 'type') {
                            type_Z = parser.getText();
                        } else if (text == 'value') {
                            value = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Sf_date_received consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Max_bill_rate {
        public Integer value {get;set;} 
        public String unit {get;set;} 

        public Max_bill_rate(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'value') {
                            value = parser.getIntegerValue();
                        } else if (text == 'unit') {
                            unit = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Max_bill_rate consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Recruiters {
        public String id {get;set;} 
        public String first_name {get;set;} 
        public String last_name {get;set;} 
        public String name {get;set;} 
        public String employee_id {get;set;} 
        public Boolean responsible {get;set;} 

        public Recruiters(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getText();
                        } else if (text == 'first_name') {
                            first_name = parser.getText();
                        } else if (text == 'last_name') {
                            last_name = parser.getText();
                        } else if (text == 'name') {
                            name = parser.getText();
                        } else if (text == 'employee_id') {
                            employee_id = parser.getText();
                        } else if (text == 'responsible') {
                            responsible = parser.getBooleanValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Recruiters consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Keyed_custom_fields {
         public map<string,string> fieldValmap=new map<string,string>();
        public Keyed_custom_fields(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT || parser.nextToken() !=null) {
                System.debug('parser.gettext()'+parser.gettext());
                 if(parser.getCurrentToken() == JSONTOken.START_ARRAY) {
                 System.debug('yes');
                    while(parser.nextToken() != JSONTOken.END_ARRAY || parser.nextToken() !=null) {
                        parser.skipchildren();
                    }
                 }
                 if(parser.getCurrentToken() == JSONTOken.START_OBJECT) {
                      while (parser.nextToken() != System.JSONToken.END_OBJECT || parser.nextToken() !=null) {
                        parser.skipchildren();
                      }
                 }
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    fieldValmap.put(text,parser.getText());
                }
            }
        }
    }
    
    public class Openings {
        public String id {get;set;} 
        public String opening_id {get;set;} 
        public String status {get;set;} 
        public String opened_at {get;set;} 
        public String closed_at {get;set;} 
        public String application_id {get;set;} 
        public String close_reason {get;set;} 

        public Openings(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getText();
                        } else if (text == 'opening_id') {
                            opening_id = parser.getText();
                        } else if (text == 'status') {
                            status = parser.getText();
                        } else if (text == 'opened_at') {
                            opened_at = parser.getText();
                        } else if (text == 'closed_at') {
                            closed_at = parser.getText();
                        } else if (text == 'application_id') {
                            application_id = parser.getText();
                        } else if (text == 'close_reason') {
                            close_reason = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Openings consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Offices {
        public String id {get;set;} 
        public String name {get;set;} 
        public Location location {get;set;} 
        public String primary_contact_user_id {get;set;} 
        public String parent_id {get;set;} 
        public List<Child_ids> child_ids {get;set;} 
        public String external_id {get;set;} 

        public Offices(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getText();
                        } else if (text == 'name') {
                            name = parser.getText();
                        } else if (text == 'location') {
                            location = new Location(parser);
                        } else if (text == 'primary_contact_user_id') {
                            primary_contact_user_id = parser.getText();
                        } else if (text == 'parent_id') {
                            parent_id = parser.getText();
                        } else if (text == 'child_ids') {
                            child_ids = arrayOfChild_ids(parser);
                        } else if (text == 'external_id') {
                            external_id = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Offices consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Location {
        public String name {get;set;} 

        public Location(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'name') {
                            name = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Location consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Child_ids {

        public Child_ids(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        {
                            System.debug(LoggingLevel.WARN, 'Child_ids consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public static Greenhousejob parseSingle(String json) {
        System.JSONParser parser = System.JSON.createParser(json);
        return new Greenhousejob(parser);
    }
    public static List<GreenhouseJob> parse(String json) {
        System.JSONParser parser = System.JSON.createParser(json);
        return arrayOfGreenhouseJob(parser);
    }
    
    private static List<GreenhouseJob> arrayOfGreenhouseJob(System.JSONParser p) {
        List<GreenhouseJob> res = new List<GreenhouseJob>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new GreenhouseJob(p));
        }
        return res;
    }
    public static void consumeObject(System.JSONParser parser) {
        Integer depth = 0;
        do {
            System.JSONToken curr = parser.getCurrentToken();
            if (curr == System.JSONToken.START_OBJECT || 
                curr == System.JSONToken.START_ARRAY) {
                depth++;
            } else if (curr == System.JSONToken.END_OBJECT ||
                curr == System.JSONToken.END_ARRAY) {
                depth--;
            }
        } while (depth > 0 && parser.nextToken() != null);
    }
    









    private static List<Openings> arrayOfOpenings(System.JSONParser p) {
        List<Openings> res = new List<Openings>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Openings(p));
        }
        return res;
    }



    private static List<Child_ids> arrayOfChild_ids(System.JSONParser p) {
        List<Child_ids> res = new List<Child_ids>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Child_ids(p));
        }
        return res;
    }





    private static List<Hiring_managers> arrayOfHiring_managers(System.JSONParser p) {
        List<Hiring_managers> res = new List<Hiring_managers>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Hiring_managers(p));
        }
        return res;
    }


    private static List<Offices> arrayOfOffices(System.JSONParser p) {
        List<Offices> res = new List<Offices>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Offices(p));
        }
        return res;
    }





    private static List<Recruiters> arrayOfRecruiters(System.JSONParser p) {
        List<Recruiters> res = new List<Recruiters>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Recruiters(p));
        }
        return res;
    }




    private static List<Object> arrayOfObject(System.JSONParser p) {
        List<Object> res = new List<Object>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.readValueAs(Object.class));
        }
        return res;
    }



}